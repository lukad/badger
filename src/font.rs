// Basic 5x7 font data
// Each character is represented by 7 bytes, where each byte represents a row
// and the 5 least significant bits are used for pixels
pub const FONT_5X7: &[([u8; 7], char)] = &[
    (
        [
            0b01110000, 0b10001000, 0b10001000, 0b11111000, 0b10001000, 0b10001000, 0b10001000,
        ],
        'A',
    ),
    (
        [
            0b01110000, 0b10001000, 0b10000000, 0b10000000, 0b10000000, 0b10001000, 0b01110000,
        ],
        'C',
    ),
    (
        [
            0b11100000, 0b10010000, 0b10010000, 0b10010000, 0b10010000, 0b10010000, 0b11100000,
        ],
        'D',
    ),
    (
        [
            0b11111000, 0b10000000, 0b10000000, 0b11110000, 0b10000000, 0b10000000, 0b11111000,
        ],
        'E',
    ),
    (
        [
            0b11111000, 0b10000000, 0b10000000, 0b11110000, 0b10000000, 0b10000000, 0b10000000,
        ],
        'F',
    ),
    (
        [
            0b01110000, 0b10001000, 0b10000000, 0b10111000, 0b10001000, 0b10001000, 0b01111000,
        ],
        'G',
    ),
    (
        [
            0b10001000, 0b10001000, 0b10001000, 0b11111000, 0b10001000, 0b10001000, 0b10001000,
        ],
        'H',
    ),
    (
        [
            0b11111000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b11111000,
        ],
        'I',
    ),
    (
        [
            0b00111000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b10010000, 0b01100000,
        ],
        'J',
    ),
    (
        [
            0b10001000, 0b10010000, 0b10100000, 0b11000000, 0b10100000, 0b10010000, 0b10001000,
        ],
        'K',
    ),
    (
        [
            0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b11111000,
        ],
        'L',
    ),
    (
        [
            0b10001000, 0b11011000, 0b10101000, 0b10101000, 0b10001000, 0b10001000, 0b10001000,
        ],
        'M',
    ),
    (
        [
            0b10001000, 0b11001000, 0b10101000, 0b10011000, 0b10001000, 0b10001000, 0b10001000,
        ],
        'N',
    ),
    (
        [
            0b01110000, 0b10001000, 0b10001000, 0b10001000, 0b10001000, 0b10001000, 0b01110000,
        ],
        'O',
    ),
    (
        [
            0b11110000, 0b10001000, 0b10001000, 0b11110000, 0b10000000, 0b10000000, 0b10000000,
        ],
        'P',
    ),
    (
        [
            0b01110000, 0b10001000, 0b10001000, 0b10001000, 0b10101000, 0b10010000, 0b01101000,
        ],
        'Q',
    ),
    (
        [
            0b11110000, 0b10001000, 0b10001000, 0b11110000, 0b10100000, 0b10010000, 0b10001000,
        ],
        'R',
    ),
    (
        [
            0b01110000, 0b10001000, 0b10000000, 0b01110000, 0b00001000, 0b10001000, 0b01110000,
        ],
        'S',
    ),
    (
        [
            0b11111000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000,
        ],
        'T',
    ),
    (
        [
            0b10001000, 0b10001000, 0b10001000, 0b10001000, 0b10001000, 0b10001000, 0b01110000,
        ],
        'U',
    ),
    (
        [
            0b10001000, 0b10001000, 0b10001000, 0b10001000, 0b10001000, 0b01010000, 0b00100000,
        ],
        'V',
    ),
    (
        [
            0b10001000, 0b10001000, 0b10001000, 0b10101000, 0b10101000, 0b11011000, 0b10001000,
        ],
        'W',
    ),
    (
        [
            0b10001000, 0b10001000, 0b01010000, 0b00100000, 0b01010000, 0b10001000, 0b10001000,
        ],
        'X',
    ),
    (
        [
            0b10001000, 0b10001000, 0b01010000, 0b00100000, 0b00100000, 0b00100000, 0b00100000,
        ],
        'Y',
    ),
    (
        [
            0b11111000, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000, 0b11111000,
        ],
        'Z',
    ),
    (
        [
            0b11111000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b11111000,
        ],
        '0',
    ),
    (
        [
            0b00100000, 0b01100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b01110000,
        ],
        '1',
    ),
    (
        [
            0b11110000, 0b00001000, 0b00001000, 0b01110000, 0b10000000, 0b10000000, 0b11111000,
        ],
        '2',
    ),
    (
        [
            0b11110000, 0b00001000, 0b00001000, 0b01110000, 0b00001000, 0b00001000, 0b11110000,
        ],
        '3',
    ),
    (
        [
            0b10001000, 0b10001000, 0b10001000, 0b11111000, 0b00001000, 0b00001000, 0b00001000,
        ],
        '4',
    ),
    (
        [
            0b11111000, 0b10000000, 0b10000000, 0b11110000, 0b00001000, 0b00001000, 0b11110000,
        ],
        '5',
    ),
    (
        [
            0b01110000, 0b10000000, 0b10000000, 0b11110000, 0b10001000, 0b10001000, 0b01110000,
        ],
        '6',
    ),
    (
        [
            0b11111000, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b01000000, 0b01000000,
        ],
        '7',
    ),
    (
        [
            0b01110000, 0b10001000, 0b10001000, 0b01110000, 0b10001000, 0b10001000, 0b01110000,
        ],
        '8',
    ),
    (
        [
            0b01110000, 0b10001000, 0b10001000, 0b01111000, 0b00001000, 0b00001000, 0b01110000,
        ],
        '9',
    ),
    (
        [
            0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000, 0b00100000, 0b00000000,
        ],
        '.',
    ),
    (
        [
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b01000000, 0b10000000,
        ],
        ',',
    ),
    (
        [
            0b00000000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00000000, 0b00100000,
        ],
        '!',
    ),
    (
        [
            0b00100000, 0b01010000, 0b10001000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ],
        '^',
    ),
    (
        [
            0b00000000, 0b00000000, 0b00000000, 0b11111000, 0b00000000, 0b00000000, 0b00000000,
        ],
        '-',
    ),
    (
        [
            0b01010000, 0b10101000, 0b01010000, 0b10101000, 0b01010000, 0b10101000, 0b01010000,
        ],
        '*',
    ),
    (
        [
            0b00100000, 0b00100000, 0b11111000, 0b00100000, 0b11111000, 0b00100000, 0b00100000,
        ],
        '+',
    ),
    (
        [
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ],
        ' ',
    ),
];

pub fn get_char_data(c: char) -> [u8; 7] {
    FONT_5X7
        .iter()
        .find(|(_, ch)| *ch == c.to_ascii_uppercase())
        .map(|(data, _)| *data)
        .unwrap_or_else(|| FONT_5X7.last().unwrap().0) // Return space for unknown chars
}
